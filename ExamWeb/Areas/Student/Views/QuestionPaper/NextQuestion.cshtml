@model Exam.Model.ViewModels.QuestionQVM

@{
	ViewBag.Title = @ViewBag.score;
}

<br>

<h1></h1>



<div id="clockdiv">
	<h1 style="color: red">

		<div class="minutes" style="float: left"> </div>
		<p style="float: left">:</p>
		<div class="seconds"></div>
	</h1>
</div>

<script>


	function getTimeRemaining(endtime) {
		var t = Date.parse(endtime) - Date.parse(new Date());
		var seconds = Math.floor((t / 1000) % 60);
		var minutes = Math.floor((t / 1000 / 60) % 1);

		return {
			'total': t,
			'minutes': minutes,
			'seconds': seconds
		};
	}

	function initializeClock(id, endtime) {
		var clock = document.getElementById(id);

		var minutesSpan = clock.querySelector('.minutes');
		var secondsSpan = clock.querySelector('.seconds');

		function updateClock() {
			var t = getTimeRemaining(endtime);


			minutesSpan.innerHTML = ('0' + t.minutes).slice(-2);
			secondsSpan.innerHTML = ('0' + t.seconds).slice(-2);

			if (t.total <= 0) {
				clearInterval(timeinterval);


			}
		}

		updateClock();
		var timeinterval = setInterval(updateClock, 1000);
	}

	var deadline = new Date(Date.parse(new Date()) + 60 * 60 * 1000);
	initializeClock('clockdiv', deadline);

	// ...................................
	var _second = 1000;
	var _minute = _second * 60;
	var _hour = _minute * 60;
	var _day = _hour * 24;
	var timer;
	var end = new Date().getTime() + (60 * _second);
	//

	function showRemaining() {
		var now = new Date();
		var distance = end - now;
		if (distance < 0) {
			window.setTimeout(function () {
				alert("Time Over");
				window.location.href = '@Url.Action("TimeoutExam", "QuestionPaper")';
			}, 1000);
			clearInterval(timer);
			document.getElementById('countdown').innerHTML = 'EXPIRED!';

			return;
		}
		var days = Math.floor(distance / _day);
		var hours = Math.floor((distance % _day) / _hour);
		var minutes = Math.floor((distance % _hour) / _minute);
		var seconds = Math.floor((distance % _minute) / _second);

		document.getElementById('countdown').innerHTML = days + 'days ';
		document.getElementById('countdown').innerHTML += hours + 'hrs ';
		document.getElementById('countdown').innerHTML += minutes + 'mins ';
		document.getElementById('countdown').innerHTML += seconds + 'secs';
	}

	timer = setInterval(showRemaining, 1000);
</script>
<div>

	<form method="post" asp-action="NextQuestion" enctype="multipart/form-data">
		<input asp-for="Anwser" hidden />
		<input asp-for="AnwserId" hidden />
		<input asp-for="QuestionID" hidden />
		<input asp-for="SubjectID" hidden />
		<input asp-for="QuestionText" hidden />
		<input asp-for="QuestionDispalyOrder" hidden />
		<input asp-for="TotalQuestion" hidden />
		@Html.AntiForgeryToken()
		<div>
			<h4> </h4>

			<hr />
			<dl class="dl-horizontal">
				<dd>
					<h4 class="text-primary"> @Html.DisplayFor(model => model.QuestionText) </h4>
					<hr />
				</dd>
				<dd>
					<span class="text-danger"><div asp-validation-summary="All"></div></span>
				</dd>
				@foreach (var choice in Model.Choices)
				{
					<dd>
						<h4></h4>
						<h5 class="text-primary">
							@Html.RadioButtonFor(model => model.selectedvalue, choice.DisplayOrder)
							@Html.DisplayFor(model => choice.ChoiceText)

						</h5>
					</dd>
					@Html.HiddenFor(m => choice.ChoiceID)
				}

			</dl>
		</div>

		<div class="form-group">
			<div class="col-md-offset-2 col-md-10 col-lg-10">
				<input type="submit" value="NEXT" class="btn btn-danger" /> <span class="text-bg-info"> ( @Html.DisplayFor(model => model.QuestionDispalyOrder) of @Html.DisplayFor(model => model.TotalQuestion) )</span>
			</div>
		</div>
	</form>
	@section Scripts{
		@{
			<partial name="_ValidationScriptsPartial" />
		}
	}

</div>


